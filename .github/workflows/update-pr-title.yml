name: ðŸ”„ Normalize PR title

on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  update-title:
    runs-on: ubuntu-latest
    steps:
      - name: Normalize PR title to [#num] tail
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              core.info("No pull_request context; exiting.");
              return;
            }

            const origTitle = pr.title || "";
            const branch = (pr.head && pr.head.ref) ? pr.head.ref : "";

            // If already normalized, exit
            if (/^\s*\[#\d+\]\s+/.test(origTitle)) {
              core.info("Title already normalized; nothing to do.");
              return;
            }

            // Find first ticket number with its position (no named groups)
            function findNumWithPos(s) {
              if (!s) return null;

              // Each pattern returns the matched number and its absolute index
              const patterns = [
                // #123
                {
                  re: /#(\d{1,8})\b/,
                  get: (m) => {
                    const num = m[1];
                    const idx = m.index + m[0].lastIndexOf(num);
                    return { num, index: idx, length: num.length };
                  }
                },
                // ticket-123 / ticket 123 / ticket_123
                {
                  re: /ticket[-_\s]?(\d{1,8})\b/i,
                  get: (m) => {
                    const num = m[1];
                    const idx = m.index + m[0].lastIndexOf(num);
                    return { num, index: idx, length: num.length };
                  }
                },
                // ABC-123
                {
                  re: /[A-Z][A-Z0-9_]*-(\d{1,8})\b/,
                  get: (m) => {
                    const num = m[1];
                    const idx = m.index + m[0].lastIndexOf(num);
                    return { num, index: idx, length: num.length };
                  }
                },
                // 4/creer (number immediately before a slash)
                {
                  re: /(^|[^\d])(\d{1,8})(?=\s*\/)/,
                  get: (m) => {
                    const num = m[2];
                    const idx = m.index + m[0].lastIndexOf(num);
                    return { num, index: idx, length: num.length };
                  }
                },
              ];

              for (const p of patterns) {
                const m = s.match(p.re);
                if (m) return p.get(m);
              }
              return null;
            }

            // Prefer title, else branch
            let found = findNumWithPos(origTitle) || findNumWithPos(branch);
            if (!found) {
              core.info("No ticket number found in title or branch; exiting.");
              return;
            }

            const { num, index, length } = found;

            // Tail = everything AFTER the number + separators
            function tailAfterNumber(s, idx, len) {
              if (!s) return "";
              let after = s.slice(idx + len);
              // drop immediate separators after number
              after = after.replace(/^[\s_\-\/:]+/, "");
              // normalize separators to single spaces
              after = after
                .replace(/[\/_\-:]+/g, " ")
                .replace(/\s+/g, " ")
                .trim();
              return after;
            }

            // Try from title first, fallback to branch
            let tail = tailAfterNumber(origTitle, index, length);
            if (!tail) {
              const f2 = findNumWithPos(branch);
              if (f2) tail = tailAfterNumber(branch, f2.index, f2.length);
            }
            // If still empty, degrade gracefully from original title
            if (!tail) {
              tail = origTitle
                .replace(/^[^\d#A-Z]+/i, "")
                .replace(/^[\s_\-\/:]+/, "")
                .replace(/[\/_\-:]+/g, " ")
                .replace(/\s+/g, " ")
                .trim();
            }

            const newTitle = `[#${num}] ${tail}`.trim();

            if (newTitle && newTitle !== origTitle) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                title: newTitle,
              });
              core.info(`Title updated: "${origTitle}" â†’ "${newTitle}"`);
            } else {
              core.info("No change applied to title.");
            }