name: üîó Lier les tickets a la PR

on:
  pull_request:
    branches: [ develop ]
    types: [opened, edited, synchronize, ready_for_review, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  link:
    runs-on: ubuntu-latest
    steps:
      - name: Detecter et lier les tickets dans la PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // --- Regex robustes, sans variables d'env ni groupes nomm√©s ---
            // A. Formats "ticket-123", "ticket 123", "ticket_123" (branche & titre)
            const reTicketInBranch = /(?:^|[\\/_-])ticket[-_ ]?(\d+)(?=$|[^0-9])/ig;
            const reTicketInText   = /\bticket[-_ ]?(\d+)\b/ig;

            // B. Liens #123, cl√©s PROJ-123, et fermetures "fix/close/resolve #123"
            const reHashIssue     = /#(\d+)\b/g;
            const reProjectIssue  = /\b[A-Z][A-Z0-9_]+-(\d+)\b/g;
            const reClosingRef    = /(?:close[sd]?|fix(?:es|ed)?|resolve(?:s|d)?)\s+#(\d+)/ig;

            // Verbe fort d√©tect√© n'importe o√π => "Fixes #"
            const strongVerbRe    = /\b(fix(?:es|ed)?|close(?:s|d)?|resolve(?:s|d)?)\b/i;

            const branch = pr.head.ref || '';
            const title  = pr.title || '';
            let body     = pr.body || '';

            // R√©cup√©rer tous les messages de commit de la PR
            const commits = await github.paginate(
              github.rest.pulls.listCommits,
              { owner, repo, pull_number: pr.number, per_page: 100 }
            );
            const commitMessages = commits.map(c => c.commit.message).join('\n');

            // Pour debug
            console.log(`PR #${pr.number} ‚Äî BRANCH="${branch}" TITLE="${title}"`);
            const haystack = [branch, title, body, commitMessages].join('\n');

            // ---- D√©tection des num√©ros ----
            const found = new Set();

            // 1) ticket-123 dans le NOM DE BRANCHE
            for (const m of branch.matchAll(reTicketInBranch)) {
              const n = Number(m[1]); if (Number.isInteger(n)) found.add(n);
            }

            // 2) ticket-123 / ticket 123 / ticket_123 dans TITRE + BODY + COMMITS
            for (const m of title.matchAll(reTicketInText)) {
              const n = Number(m[1]); if (Number.isInteger(n)) found.add(n);
            }
            for (const m of body.matchAll(reTicketInText)) {
              const n = Number(m[1]); if (Number.isInteger(n)) found.add(n);
            }
            for (const m of commitMessages.matchAll(reTicketInText)) {
              const n = Number(m[1]); if (Number.isInteger(n)) found.add(n);
            }

            // 3) #123 (dans titre/body/commits)
            for (const m of haystack.matchAll(reHashIssue)) {
              const n = Number(m[1]); if (Number.isInteger(n)) found.add(n);
            }

            // 4) PROJ-123 (dans titre/body/commits)
            for (const m of haystack.matchAll(reProjectIssue)) {
              const n = Number(m[1]); if (Number.isInteger(n)) found.add(n);
            }

            // 5) Fermetures explicites "fix/close/resolve #123"
            for (const m of haystack.matchAll(reClosingRef)) {
              const n = Number(m[1]); if (Number.isInteger(n)) found.add(n);
            }

            console.log('NUM√âROS d√©tect√©s:', [...found]);

            if (found.size === 0) {
              core.setFailed(
                'Cette PR n‚Äôest li√©e √† aucun ticket/issue d√©tect√©.\n' +
                'Accepte l‚Äôun des crit√®res : Closes #123 | titre PROJ-123 | branche ticket-123.'
              );
              return;
            }

            const useFixes = strongVerbRe.test(haystack);

            // ---- √âviter les doublons dans le body de la PR ----
            const already = new Set();
            const bodyLower = body.toLowerCase();
            for (const n of found) {
              if (bodyLower.includes(`#${n}`)) already.add(n);
            }

            const toAdd = [...found].filter(n => !already.has(n));
            if (toAdd.length === 0) {
              console.log('Tous les tickets d√©tect√©s sont d√©j√† r√©f√©renc√©s dans la PR.');
              return;
            }

            const prefix = useFixes ? 'Fixes' : 'Related to';
            const lines = toAdd.map(n => `${prefix} #${n}`).join('\n');
            const separator = body.trim().length ? '\n\n' : '';
            const newBody = `${body}${separator}<!-- auto-linked by workflow -->\n${lines}\n`;

            await github.rest.pulls.update({
              owner, repo,
              pull_number: pr.number,
              body: newBody
            });

            console.log(`Ajout√© dans la PR: ${lines}`);
