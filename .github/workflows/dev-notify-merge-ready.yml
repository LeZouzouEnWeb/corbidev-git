name: 📢 Dev Notify Merge Ready

on:
  # ✅ Toujours visible dans Actions + déclenché à chaque check suite terminé
  check_suite:
    branches: [ develop ]
    types: [completed]

  # ✅ Déclenchement manuel depuis l'onglet Actions
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: read
  statuses: read

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Comment if merge is now possible
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // 🔍 Récupère le SHA du commit concerné
            const sha = context.payload?.check_suite?.head_sha ?? context.sha;
            if (!sha) {
              core.info("No SHA found for this event.");
              return;
            }

            // 🔗 Liste les PRs associées à ce commit
            const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner, repo, commit_sha: sha
            });
            if (!prs.data.length) {
              core.info(`No PR found for commit ${sha}.`);
              return;
            }

            // 🧠 Vérifie si la PR est mergeable et si tous les checks sont verts
            async function isMergeReady(pr) {
              const checks = await github.rest.checks.listForRef({
                owner, repo, ref: pr.head.sha, per_page: 100
              });

              const anyInProgress = checks.data.check_runs.some(r =>
                ["queued","in_progress","requested"].includes(r.status)
              );
              if (anyInProgress) return false;

              const anyFailed = checks.data.check_runs.some(r =>
                ["failure","timed_out","cancelled","action_required","stale"].includes(r.conclusion ?? "")
              );
              if (anyFailed) return false;

              const combined = await github.rest.repos.getCombinedStatusForRef({
                owner, repo, ref: pr.head.sha
              });
              if (!["success","no_status"].includes(combined.data.state)) return false;

              const prFull = await github.rest.pulls.get({
                owner, repo, pull_number: pr.number
              });
              const okStates = new Set(["clean","has_hooks","unstable"]);
              return prFull.data.mergeable === true && okStates.has(prFull.data.mergeable_state);
            }

            // 💬 Commente sur chaque PR prête à être mergée
            for (const pr of prs.data.filter(p => p.state === "open")) {
              const mergeReady = await isMergeReady(pr);
              if (!mergeReady) {
                core.info(`PR #${pr.number} not merge-ready yet.`);
                continue;
              }

              const marker = `<!-- merge-ready:${sha} -->`;
              const existing = await github.rest.issues.listComments({
                owner, repo, issue_number: pr.number, per_page: 100
              });
              const already = existing.data.some(c => c.body?.includes(marker));
              if (already) {
                core.info(`Already commented for ${sha} on PR #${pr.number}.`);
                continue;
              }

              const body = `${marker}
              ✅ **Merge maintenant possible**
              Tous les contrôles sont au vert pour \`${sha.substring(0,7)}\`.
              _This is an automated message._`;

              await github.rest.issues.createComment({
                owner, repo, issue_number: pr.number, body
              });
              core.info(`Commented on PR #${pr.number}.`);
            }