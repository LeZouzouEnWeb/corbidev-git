name: üöÄ D√©ploiement Homol

on:
  pull_request:
    branches: [ homol ]
    types: [ closed ] # d√©clench√© quand la PR est ferm√©e (on v√©rifie merged ci-dessous)

permissions:
  contents: read

concurrency:
  group: homol-deploy-${{ github.event.pull_request.head.ref }}
  cancel-in-progress: true

env:
  REMOTE_ENV: homol
  REMOTE_CHEMIN: ${{ secrets.REMOTE_CHEMIN }}
  ADRESSE_GLOBAL: ${{ vars.ADRESSE_GLOBAL }}
  ADRESSE_LOCAL: ${{ vars.ADRESSE_LOCAL }}
  SFTP_HOST: ${{ secrets.SFTP_HOST }}
  SFTP_USER: ${{ secrets.SFTP_USER }}
  SFTP_PORT: ${{ secrets.SFTP_PORT }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  mirror_homol_to_main:
    name: üîÅ Mirror develop ‚Üí homol
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'homol' &&
      github.event.pull_request.head.ref == 'develop'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: ü§ñ Checkout Homol (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Align main to homol (reset --hard + force-with-lease)
        run: |
          set -e
          git fetch origin homol develop
          git switch -C homol origin/homol
          git reset --hard origin/develop
          git push --force-with-lease origin homol
          echo "‚úÖ Miroir homol = develop effectu√©."

  deploy:
    name: üöÄ D√©ployer sur le serveur Homol
    needs: mirror_homol_to_main
    if: ${{ github.event.pull_request.merged == true }} # uniquement si la PR a √©t√© merg√©e
    runs-on: ubuntu-latest

    steps:
      - name: V√©rifier variables requises
        shell: bash
        run: |
          miss=0
          for v in REMOTE_CHEMIN ADRESSE_GLOBAL ADRESSE_LOCAL SFTP_HOST SFTP_USER SSH_PRIVATE_KEY; do
            if [ -z "${!v}" ]; then
              echo "::error title=Variable manquante::$v n'est pas d√©fini."
              miss=1
            else
              echo "::notice title=Variable::$v=${!v}"
            fi
          done
          [ "$miss" -eq 0 ] || exit 1

      - name: R√©cup√©rer le code
        uses: actions/checkout@v4

      - name: Construire le chemin distant normalis√© (sans cr√©ation)
        id: path
        shell: bash
        run: |
          norm() { printf "%s" "$1" | sed -e 's#//*#/#g' -e 's#^/##' -e 's#/$##'; }
          _remote="$(norm "$REMOTE_CHEMIN")"
          _env="$(norm "$REMOTE_ENV")"  
          _glob="$(norm "$ADRESSE_GLOBAL")"
          _loca="$(norm "$ADRESSE_LOCAL")"

          # Chemin attendu : REMOTE_CHEMIN/ADRESSE_GLOBAL/ENV/ADRESSE_LOCAL
          REMOTE_PATH="/${_remote}/${_glob}/${_env}/${_loca}"
          REMOTE_PATH="$(echo "$REMOTE_PATH" | sed -e 's#//*#/#g')"

          echo "REMOTE_PATH=$REMOTE_PATH" >> "$GITHUB_OUTPUT"
          echo "::notice title=REMOTE_PATH::$REMOTE_PATH"

      - name: Pr√©parer l‚Äôagent SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Ajout h√¥te dans known_hosts
        shell: bash
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${SFTP_PORT:-22}" "$SFTP_HOST" >> ~/.ssh/known_hosts 2>/dev/null
          chmod 600 ~/.ssh/known_hosts

      - name: V√©rifier la connexion SSH
        shell: bash
        run: |
          ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p "${SFTP_PORT:-22}" "$SFTP_USER@$SFTP_HOST" "echo 'Connexion SSH OK'"

      - name: D√©ployer les fichiers (rsync avec .rsync-ignore si pr√©sent)
        shell: bash
        run: |
          REMOTE_PATH="${{ steps.path.outputs.REMOTE_PATH }}"
          echo "D√©ploiement vers : $REMOTE_PATH"

          # Fail si le dossier n'existe pas (on NE LE CREE PAS)
          ssh -p "${SFTP_PORT:-22}" "$SFTP_USER@$SFTP_HOST" "[ -d \"$REMOTE_PATH\" ]" \
            || { echo "::error title=Dossier distant manquant::Le dossier $REMOTE_PATH n'existe pas."; exit 1; }

          # Pr√©pare les exclusions (.rsync-ignore si pr√©sent)
          RSYNC_EXCLUDES=(--exclude='.git/' --exclude='.github/')
          if [ -f ".rsync-ignore" ]; then
            echo "::notice title=rsync::Utilisation de .rsync-ignore"
            RSYNC_EXCLUDES+=(--exclude-from='.rsync-ignore')
          else
            echo "::notice title=rsync::Aucun .rsync-ignore trouv√© √† la racine du d√©p√¥t"
          fi

          # Synchronisation (idempotente) + suppression des fichiers retir√©s c√¥t√© source
          rsync -az --delete \
            "${RSYNC_EXCLUDES[@]}" \
            -e "ssh -p ${SFTP_PORT:-22}" \
            ./ "$SFTP_USER@$SFTP_HOST:$REMOTE_PATH/"

          echo "‚úÖ D√©ploiement termin√©."
