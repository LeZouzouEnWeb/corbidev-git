name: üöÄ Deploy DEV (IONOS SFTP)

on:
  pull_request:
    branches: [ develop ]
    types: [opened, synchronize, reopened, ready_for_review, closed]
  push:
    branches: [ develop ]   # supprime ce bloc si tu veux d√©ployer uniquement apr√®s merge

concurrency:
  group: deploy-develop
  cancel-in-progress: true

jobs:
  # ---- PR PRECHECK (bloquant) : tourne AVANT le merge, ne d√©ploie pas ----
  precheck:
    name: üîé Precheck serveur (bloquant PR)
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
      - name: üîê Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üîß Construire le chemin distant normalis√©
        id: build_path
        env:
          REMOTE_CHEMIN: ${{ secrets.REMOTE_CHEMIN }}
          ADRESSE_GLOBAL: ${{ vars.ADRESSE_GLOBAL }}
          ADRESSE_LOCAL: ${{ vars.ADRESSE_LOCAL }}
        run: |
          set -euo pipefail
          if [ -z "${REMOTE_CHEMIN:-}" ] || [ -z "${ADRESSE_GLOBAL:-}" ] || [ -z "${ADRESSE_LOCAL:-}" ]; then
            echo "::error title=Variables manquantes::REMOTE_CHEMIN, ADRESSE_GLOBAL et ADRESSE_LOCAL doivent √™tre d√©finies (Settings ¬ª Variables)."
            exit 1
          fi
          REMOTE_PATH="${REMOTE_CHEMIN%/}/${ADRESSE_GLOBAL%/}/dev/${ADRESSE_LOCAL#/}"
          REMOTE_PATH="$(printf '%s\n' "$REMOTE_PATH" | sed -E 's:/+:/:g')"
          echo "REMOTE_PATH=$REMOTE_PATH"
          echo "REMOTE_PATH=$REMOTE_PATH" >> "$GITHUB_OUTPUT"

      - name: üîå Tester la connexion SSH
        run: |
          set -e
          ssh -o BatchMode=yes -o StrictHostKeyChecking=no \
            ${{ secrets.SFTP_USER }}@${{ secrets.SFTP_HOST }} \
            "echo 'SSH OK: ' \$(hostname)"

      - name: üìÅ V√©rifier/cr√©er le dossier (avec logs clairs)
        id: ensure_dir
        run: |
          set -e
          REMOTE_PATH="${{ steps.build_path.outputs.REMOTE_PATH }}"
          # On check s'il existe, sinon on cr√©e
          ssh -o BatchMode=yes -o StrictHostKeyChecking=no \
            ${{ secrets.SFTP_USER }}@${{ secrets.SFTP_HOST }} "\
              if [ -d \"$REMOTE_PATH\" ]; then \
                echo '‚úÖ Dossier d√©j√† pr√©sent : '$REMOTE_PATH; \
                echo EXISTS=true > /tmp/out; \
                echo CREATED=false >> /tmp/out; \
              else \
                echo '‚ö†Ô∏è Dossier absent, cr√©ation‚Ä¶ : '$REMOTE_PATH; \
                if mkdir -p \"$REMOTE_PATH\"; then \
                  echo '‚úÖ Dossier cr√©√© : '$REMOTE_PATH; \
                  echo EXISTS=false > /tmp/out; \
                  echo CREATED=true >> /tmp/out; \
                else \
                  echo '‚ùå √âchec cr√©ation dossier : '$REMOTE_PATH; \
                  exit 1; \
                fi \
              fi"
          cat /tmp/out
          # Export GITHUB_OUTPUT
          while IFS='=' read -r k v; do echo "$k=$v" >> "$GITHUB_OUTPUT"; done < /tmp/out

      - name: üßæ R√©sum√© lisible
        run: |
          echo "EXISTS=${{ steps.ensure_dir.outputs.EXISTS }}"
          echo "CREATED=${{ steps.ensure_dir.outputs.CREATED }}"
          if [ "${{ steps.ensure_dir.outputs.EXISTS }}" = "true" ]; then
            echo "::notice title=√âtat dossier::‚úÖ Pr√©sent avant le job"
          else
            if [ "${{ steps.ensure_dir.outputs.CREATED }}" = "true" ]; then
              echo "::notice title=√âtat dossier::‚úÖ Cr√©√© pendant le job"
            else
              echo "::error title=√âtat dossier::‚ùå Inconnu (v√©rifiez les logs)"
              exit 1
            fi
          fi

  # ---- DEPLOY : tourne apr√®s merge (ou sur push direct sur develop) ----
  deploy:
    name: üöö Deploy apr√®s merge
    if: >
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    needs: []  # ind√©pendant; le blocage merge est assur√© par 'precheck'

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: üîê Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üîß Construire le chemin distant normalis√©
        id: build_path
        env:
          REMOTE_CHEMIN: ${{ vars.REMOTE_CHEMIN }}
          ADRESSE_GLOBAL: ${{ vars.ADRESSE_GLOBAL }}
          ADRESSE_LOCAL: ${{ vars.ADRESSE_LOCAL }}
        run: |
          set -euo pipefail
          REMOTE_PATH="${REMOTE_CHEMIN%/}/${ADRESSE_GLOBAL%/}/dev/${ADRESSE_LOCAL#/}"
          REMOTE_PATH="$(printf '%s\n' "$REMOTE_PATH" | sed -E 's:/+:/:g')"
          echo "REMOTE_PATH=$REMOTE_PATH"
          echo "REMOTE_PATH=$REMOTE_PATH" >> "$GITHUB_OUTPUT"

      - name: üìÅ S'assurer que le dossier existe
        run: |
          ssh -o BatchMode=yes -o StrictHostKeyChecking=no \
            ${{ secrets.SFTP_USER }}@${{ secrets.SFTP_HOST }} \
            "mkdir -p '${{ steps.build_path.outputs.REMOTE_PATH }}' && echo '‚úÖ Dossier pr√™t: ${{ steps.build_path.outputs.REMOTE_PATH }}'"

      - name: üöö Deploy via SFTP (incremental)
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          server: ${{ secrets.SFTP_HOST }}
          username: ${{ secrets.SFTP_USER }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          local_path: .
          remote_path: ${{ steps.build_path.outputs.REMOTE_PATH }}
          exclude: |
            .git*
            .github/**
            node_modules/**
            .env*
            tests/**
            coverage/**
          args: "-rz"

      - name: üëÄ Lister le dossier d√©ploy√© (debug)
        run: |
          ssh -o BatchMode=yes -o StrictHostKeyChecking=no \
            ${{ secrets.SFTP_USER }}@${{ secrets.SFTP_HOST }} \
            "ls -la '${{ steps.build_path.outputs.REMOTE_PATH }}' || true"
