name: üóëÔ∏è Supprimer la branche apr√®s fusion

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: write

env:
  # Comma-separated list of branches that must NEVER be auto-deleted
  FORBIDDEN_BRANCHES: develop,homol

jobs:
  delete_branch:
    name: Delete source branch when PR is merged
    runs-on: ubuntu-latest
    steps:
      - name: Delete branch or explain why it's skipped
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const headRef = pr.head.ref; // source branch
            const baseRef = pr.base.ref; // target branch
            const defaultBranch = context.payload.repository.default_branch;
            const sameRepo = pr.head.repo.full_name === `${owner}/${repo}`;
            const merged = pr.merged === true;
            const forbidden = (process.env.FORBIDDEN_BRANCHES || "")
              .split(",")
              .map(s => s.trim())
              .filter(Boolean);

            function comment(body) {
              return github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr.number,
                body
              });
            }

            let reason = null;
            if (!merged) {
              reason = "PR not merged.";
            } else if (!sameRepo) {
              reason = "Branch originates from a fork (external repository).";
            } else if (headRef === baseRef) {
              reason = `Head branch equals base branch (${baseRef}).`;
            } else if (headRef === defaultBranch) {
              reason = `Head branch is the default branch (${defaultBranch}).`;
            } else if (forbidden.includes(headRef)) {
              reason = `Head branch '${headRef}' is in the forbidden list: ${forbidden.join(", ")}`;
            }

            if (reason) {
              const msg = `üõà Auto-delete skipped: ${reason}`;
              core.notice(msg);
              await comment(msg);
              return;
            }

            try {
              core.info(`Attempting to delete heads/${headRef} on ${owner}/${repo}`);
              await github.rest.git.deleteRef({
                owner,
                repo,
                ref: `heads/${headRef}`
              });
              const ok = `‚úÖ Deleted branch heads/${headRef}`;
              core.notice(ok);
              await comment(ok);
            } catch (error) {
              const msg = `‚ö†Ô∏è Failed to delete branch heads/${headRef}: ${error?.message || error}`;
              core.warning(msg);
              await comment(msg);
              throw error;
            }
